# -*- coding: utf-8 -*-
"""anmol.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kEHdSEAm9w7Cj5wx69fuaxd4zyGE8tKX
"""

#importing
import numpy as np
import pandas as pd
ack=[]

#import data
#input le weather  time day
def inp(arr,path):
    dataset = pd.read_csv(path)#csv file ka path ya name
    # pp=[weather,time_zone,day]
    pp =arr
    X = dataset.iloc[:, :-1].values
    y = dataset.iloc[:, -1].values
    #Splitting the dataset into the Training set and Test set
    from sklearn.model_selection import train_test_split

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

    #feature scaling
    from sklearn.preprocessing import StandardScaler
    sc = StandardScaler()
    X_train = sc.fit_transform(X_train)
    X_test = sc.transform(X_test)

    #logistic
    from sklearn.linear_model import LogisticRegression
    from sklearn.metrics import confusion_matrix, accuracy_score
    classifier = LogisticRegression(random_state = 0)
    classifier.fit(X_train, y_train)
    a=[-1,-1]
    y_pred = classifier.predict(X_test)
    a[1]=classifier.predict(sc.transform([pp]))[0]
    a[0]=accuracy_score(y_test, y_pred)
    ack.append(a)

    #knn
    from sklearn.neighbors import KNeighborsClassifier
    classifier = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)
    classifier.fit(X_train, y_train)
    a=[-1,-1]
    y_pred = classifier.predict(X_test)
    a[1]=classifier.predict(sc.transform([pp]))[0]
    a[0]=accuracy_score(y_test, y_pred)
    ack.append(a)

    #svm
    from sklearn.svm import SVC
    classifier = SVC(kernel = 'linear', random_state = 0)
    classifier.fit(X_train, y_train)
    a=[-1,-1]
    y_pred = classifier.predict(X_test)
    a[1]=classifier.predict(sc.transform([pp]))[0]
    a[0]=accuracy_score(y_test, y_pred)
    ack.append(a)

    #ksvm
    from sklearn.svm import SVC
    classifier = SVC(kernel = 'rbf', random_state = 0)
    classifier.fit(X_train, y_train)
    a=[-1,-1]
    y_pred = classifier.predict(X_test)
    a[1]=classifier.predict(sc.transform([pp]))[0]
    a[0]=accuracy_score(y_test, y_pred)
    ack.append(a)

    #naive bayes
    from sklearn.naive_bayes import GaussianNB
    classifier = GaussianNB()
    classifier.fit(X_train, y_train)
    a=[-1,-1]
    y_pred = classifier.predict(X_test)
    a[1]=classifier.predict(sc.transform([pp]))[0]
    a[0]=accuracy_score(y_test, y_pred)
    ack.append(a)

    #forest
    from sklearn.ensemble import RandomForestClassifier
    classifier = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
    classifier.fit(X_train, y_train)
    a=[-1,-1]
    y_pred = classifier.predict(X_test)
    a[1]=classifier.predict(sc.transform([pp]))[0]
    a[0]=accuracy_score(y_test, y_pred)
    ack.append(a)

    print(ack)
    ack.sort(reverse=True)

    print(ack)

    return ack[0][1]